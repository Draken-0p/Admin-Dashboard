{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInjectScript = void 0;\n\nvar react_1 = require(\"react\");\n\nvar url = 'https://apis.google.com/js/api.js';\nvar queue = [];\nvar injector = 'init';\nvar script = null;\n\nfunction useInjectScript() {\n  var _a = (0, react_1.useState)({\n    loaded: false,\n    error: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  (0, react_1.useEffect)(function () {\n    // check if the script is already cached\n    if (injector === 'loaded') {\n      setState({\n        loaded: true,\n        error: false\n      });\n      return;\n    } // check if the script already errored\n\n\n    if (injector === 'error') {\n      setState({\n        loaded: true,\n        error: true\n      });\n      return;\n    }\n\n    var onScriptEvent = function (error) {\n      // Get all error or load functions and call them\n      if (error) console.log('error loading the script');\n      queue.forEach(function (job) {\n        return job();\n      });\n\n      if (error && script !== null) {\n        script.remove();\n        injector = 'error';\n      } else injector = 'loaded';\n\n      script = null;\n    };\n\n    var state = function (error) {\n      setState({\n        loaded: true,\n        error: error\n      });\n    };\n\n    if (script === null) {\n      script = document.createElement('script');\n      script.src = url;\n      script.async = true; // append the script to the body\n\n      document.body.appendChild(script);\n      script.addEventListener('load', function () {\n        return onScriptEvent(false);\n      });\n      script.addEventListener('error', function () {\n        return onScriptEvent(true);\n      });\n      injector = 'loading';\n    }\n\n    queue.push(state); // remove the event listeners\n\n    return function () {\n      //checks the main injector instance\n      //prevents Cannot read property 'removeEventListener' of null in hot reload\n      if (!script) return;\n      script.removeEventListener('load', onScriptEvent);\n      script.removeEventListener('error', onScriptEvent);\n    };\n  }, [url]);\n  return [state.loaded, state.error];\n}\n\nexports.useInjectScript = useInjectScript;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA,IAAMA,GAAG,GAAG,mCAAZ;AAEA,IAAMC,KAAK,GAAU,EAArB;AACA,IAAIC,QAAQ,GAA4C,MAAxD;AACA,IAAIC,MAAM,GAAQ,IAAlB;;AAEA,SAAgBC,eAAhB,GAA+B;EAKvB,SAAoB,sBAAqB;IAC7CC,MAAM,EAAE,KADqC;IAE7CC,KAAK,EAAE;EAFsC,CAArB,CAApB;EAAA,IAACC,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAKN,uBAAU;IACR;IACA,IAAIN,QAAQ,KAAK,QAAjB,EAA2B;MACzBM,QAAQ,CAAC;QACPH,MAAM,EAAE,IADD;QAEPC,KAAK,EAAE;MAFA,CAAD,CAAR;MAIA;IACD,CARO,CAUR;;;IACA,IAAIJ,QAAQ,KAAK,OAAjB,EAA0B;MACxBM,QAAQ,CAAC;QACPH,MAAM,EAAE,IADD;QAEPC,KAAK,EAAE;MAFA,CAAD,CAAR;MAIA;IACD;;IAED,IAAMG,aAAa,GAAG,UAACH,KAAD,EAAe;MACnC;MACA,IAAIA,KAAJ,EAAWI,OAAO,CAACC,GAAR,CAAY,0BAAZ;MACXV,KAAK,CAACW,OAAN,CAAc,UAACC,GAAD,EAAI;QAAK,UAAG,EAAH;MAAK,CAA5B;;MAEA,IAAIP,KAAK,IAAIH,MAAM,KAAK,IAAxB,EAA8B;QAC5BA,MAAM,CAACW,MAAP;QACAZ,QAAQ,GAAG,OAAX;MACD,CAHD,MAGOA,QAAQ,GAAG,QAAX;;MACPC,MAAM,GAAG,IAAT;IACD,CAVD;;IAYA,IAAMI,KAAK,GAAG,UAACD,KAAD,EAAe;MAC3BE,QAAQ,CAAC;QACPH,MAAM,EAAE,IADD;QAEPC,KAAK;MAFE,CAAD,CAAR;IAID,CALD;;IAOA,IAAIH,MAAM,KAAK,IAAf,EAAqB;MACnBA,MAAM,GAAGY,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;MACAb,MAAM,CAACc,GAAP,GAAajB,GAAb;MACAG,MAAM,CAACe,KAAP,GAAe,IAAf,CAHmB,CAInB;;MACAH,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BjB,MAA1B;MACAA,MAAM,CAACkB,gBAAP,CAAwB,MAAxB,EAAgC;QAAM,oBAAa,CAAC,KAAD,CAAb;MAAoB,CAA1D;MACAlB,MAAM,CAACkB,gBAAP,CAAwB,OAAxB,EAAiC;QAAM,oBAAa,CAAC,IAAD,CAAb;MAAmB,CAA1D;MACAnB,QAAQ,GAAG,SAAX;IACD;;IAEDD,KAAK,CAACqB,IAAN,CAAWf,KAAX,EAjDQ,CAmDR;;IACA,OAAO;MACL;MACA;MACA,IAAI,CAACJ,MAAL,EAAa;MACbA,MAAM,CAACoB,mBAAP,CAA2B,MAA3B,EAAmCd,aAAnC;MACAN,MAAM,CAACoB,mBAAP,CAA2B,OAA3B,EAAoCd,aAApC;IACD,CAND;EAOD,CA3DD,EA2DG,CAACT,GAAD,CA3DH;EA6DA,OAAO,CAACO,KAAK,CAACF,MAAP,EAAeE,KAAK,CAACD,KAArB,CAAP;AACD;;AAxEDkB","names":["url","queue","injector","script","useInjectScript","loaded","error","state","setState","onScriptEvent","console","log","forEach","job","remove","document","createElement","src","async","body","appendChild","addEventListener","push","removeEventListener","exports"],"sources":["../src/useInjectScript.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}